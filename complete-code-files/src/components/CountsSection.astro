
<section id="counts" class="counts">
  <div class="container">
    <div class="row">
      <div class="image col-md-5 d-flex align-items-stretch justify-content-center justify-content-xl-start" data-aos="fade-right" data-aos-delay="150">
        <img src="images/counts-img.svg" alt="" class="img-fluid">
      </div>
      <div class="col-md-7 d-flex align-items-stretch pt-4 pt-xl-0" data-aos="fade-left" data-aos-delay="300">
        <div class="content d-flex flex-column justify-content-center">
          <div class="row">

            <div class="col-md-6 d-md-flex align-items-md-stretch">
              <div class="count-box">
                <i class="bi bi-emoji-smile"></i>
                <span data-purecounter-start="0" data-purecounter-end="3835039" data-purecounter-duration="2" class="purecounter"></span>
                <p><strong>Organic Reach</strong> (Global)</p>
              </div>
            </div>
            <div class="col-md-6 d-md-flex align-items-md-stretch">
              <div class="count-box">
                <i class="bi bi-journal-richtext"></i>
                <span data-purecounter-start="0" data-purecounter-end="85" data-purecounter-duration="3" class="purecounter"></span>
                <p><strong>Campaigns</strong></p>
              </div>
            </div>
            <div class="col-md-6 d-md-flex align-items-md-stretch">
              <div class="count-box">
                <i class="bi bi-clock"></i>
                <span data-purecounter-start="0" data-purecounter-end="14081" data-purecounter-duration="3" class="purecounter"></span>
                <p><strong>Watch Hours</strong> (Asia) </p>
              </div>
            </div>
            <div class="col-md-6 d-md-flex align-items-md-stretch">
              <div class="count-box">
                <i class="bi bi-globe"></i>
                <span data-purecounter-start="0" data-purecounter-end="17" data-purecounter-duration="1" class="purecounter"><p>%</p></span>
                <p><strong>Excellent CTR %</strong> (Asia)</p>
              </div>
            </div>
        
      </div>
      </div>
    </div>
    </div>
  </div>
</section>

<script>
 interface Config {
    start: number;
    end: number;
    duration: number;
    delay: number;
    once: boolean;
    decimals: number;
    legacy: boolean;
    [key: string]: number | boolean; // Index signature
}

class PureCounter {
    constructor() {
        this.registerEventListeners();
    }

    registerEventListeners(): void {
        const elements = document.querySelectorAll<HTMLElement>(".purecounter");
        if (this.intersectionListenerSupported()) {
            const observer = new IntersectionObserver(this.animateElements.bind(this), {
                root: null,
                rootMargin: "20px",
                threshold: 0.5
            });
            for (let i = 0; i < elements.length; i++) {
                observer.observe(elements[i]);
            }
        } else if (window.addEventListener) {
            this.animateLegacy(elements);
            window.addEventListener("scroll", () => this.animateLegacy(elements), { passive: true });
        }
    }

    animateLegacy(elements: NodeListOf<HTMLElement>): void {
        for (let i = 0; i < elements.length; i++) {
            if (this.parseConfig(elements[i]).legacy && this.elementIsInView(elements[i])) {
                this.animateElements([{ target: elements[i] }] as unknown as IntersectionObserverEntry[]);
            }
        }
    }

    animateElements(entries: IntersectionObserverEntry[], observer?: IntersectionObserver): void {
        entries.forEach(entry => {
            const config = entry.target ? this.parseConfig(entry.target as HTMLElement) : this.parseConfig(entry as unknown as HTMLElement);
            if (config.duration <= 0) {
                (entry.target as HTMLElement).innerHTML = config.end.toFixed(config.decimals);
            } else if ((!observer && !this.elementIsInView(entry.target as HTMLElement)) || (observer && entry.intersectionRatio < 0.5)) {
                (entry.target as HTMLElement).innerHTML = config.start > config.end ? config.end.toString() : config.start.toString();
            } else {
                setTimeout(() => {
                    if (entry.target) {
                        this.startCounter(entry.target as HTMLElement, config);
                    } else {
                        this.startCounter(entry as unknown as HTMLElement, config);
                    }
                }, config.delay);
            }
        });
    }

    startCounter(element: HTMLElement, config: Config): void {
        let increment: number = (config.end - config.start) / (config.duration / config.delay);
        let direction = "inc";
        if (config.start > config.end) {
            direction = "dec";
            increment *= -1;
        }
        if (increment < 1 && config.decimals <= 0) {
            increment = 1;
        }
        let current: number = config.decimals <= 0 ? parseInt(config.start.toString()) : parseFloat(config.start.toString());
        element.innerHTML = current.toString();
        if (config.once) {
            element.setAttribute("data-purecounter-duration", "0");
        }
        const interval = setInterval(() => {
            current += increment;
            element.innerHTML = this.formatNumber(current, config);
            if ((current >= config.end && direction === "inc") || (current <= config.end && direction === "dec")) {
                clearInterval(interval);
                if (current != config.end) {
                    element.innerHTML = config.decimals <= 0 ? parseInt(config.end.toString()).toString() : parseFloat(config.end.toString()).toFixed(config.decimals);
                }
            }
        }, config.delay);
    }

    parseConfig(element: HTMLElement): Config {
        const attributes = [].filter.call(element.attributes, (attr: Attr) => /^data-purecounter-/.test(attr.name));
        const config: Config = {
            start: 0,
            end: 9001,
            duration: 2000,
            delay: 10,
            once: true,
            decimals: 0,
            legacy: true
        };
        attributes.forEach((attr: Attr) => {
            const name = attr.name.replace("data-purecounter-", "").toLowerCase();
            if (name === "duration") {
                config[name] = parseInt((1000 * this.castDataType(attr.value)).toString());
            } else {
                config[name] = this.castDataType(attr.value);
            }
        }, this);
        return config;
    }

    formatNumber(number: number, config: Config): string {
        return config.decimals <= 0 ? Math.floor(number).toString() : number.toLocaleString(undefined, {
            minimumFractionDigits: config.decimals,
            maximumFractionDigits: config.decimals
        });
    }

    castDataType(value: string): number {
        if (/^[0-9]+\.[0-9]+$/.test(value)) {
            return parseFloat(value);
        } else if (/^[0-9]+$/.test(value)) {
            return parseInt(value);
        } else {
            return 0; // Default value if parsing fails
        }
    }

    elementIsInView(element: HTMLElement): boolean {
        const rect = element.getBoundingClientRect();
        return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    }

    intersectionListenerSupported(): boolean {
        return "IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in window.IntersectionObserverEntry.prototype;
    }
}

new PureCounter();

</script>


